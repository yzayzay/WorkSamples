import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class CopyJDBC {

    // retrieves a copy id by title id
    public int getCopyIdInStoreByTitle(int titleId)
            throws FileNotFoundException, IOException, SQLException {
        int copyId = -1;
        DbConnection dbConnection = DbConnection.accessDbConnection();
        // create statement
        PreparedStatement statement = null;
        try {
            statement = dbConnection.getConnection().prepareStatement(
                    "SELECT * FROM copy WHERE " + VidTable.TITLE_KEY
                            + "=? AND " + VidTable.COPY_STATUS + "=?");
            statement.setInt(1, titleId);
            statement.setString(2, VidTable.COPY_STATUS_AVAILABLE);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                copyId = rs.getInt(VidTable.COPY_KEY);
            }
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            System.err.printf("problem when executing query: %s\n", msg);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                System.err.printf("problem with when closing statement: %s\n",
                        msg);
            }
        }
        return copyId;
    }

    // make copy out of store
    public void makeCopyOutOfStore(int copyId)
            throws FileNotFoundException, IOException, SQLException {
        DbConnection dbConnection = DbConnection.accessDbConnection();
        // create statement
        PreparedStatement statement = null;
        try {
            statement = dbConnection.getConnection().prepareStatement(
                    "UPDATE copy SET " + VidTable.COPY_STATUS + " = ? WHERE " + VidTable.COPY_KEY
                            + "=?");
            statement.setString(1, VidTable.COPY_STATUS_CHECKED_OUT);
            statement.setInt(2, copyId);
            statement.executeUpdate();
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            System.err.printf("problem when executing query: %s\n", msg);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                System.err.printf("problem with when closing statement: %s\n",
                        msg);
            }
        }
    }

    //update the status of copy to be in store
    public void makeCopyInStore(int copyId) throws FileNotFoundException, IOException, SQLException {
        DbConnection dbConnection = DbConnection.accessDbConnection();
        // create statement
        PreparedStatement statement = null;
        try {
            statement = dbConnection.getConnection().prepareStatement(
                    "UPDATE copy SET " + VidTable.COPY_STATUS + " = ? WHERE " + VidTable.COPY_KEY
                            + "=?");
            statement.setString(1, VidTable.COPY_STATUS_AVAILABLE);
            statement.setInt(2, copyId);
            statement.executeUpdate();
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            System.err.printf("problem when executing query: %s\n", msg);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                System.err.printf("problem with when closing statement: %s\n",
                        msg);
            }
        }
    }

    public int getCopyIdOutStoreByTitleAndMember(int titleId, int memberId) throws FileNotFoundException, IOException, SQLException {
        int copyId = -1;
        DbConnection dbConnection = DbConnection.accessDbConnection();
        // create statement
        PreparedStatement statement = null;
        try {
            statement = dbConnection.getConnection().prepareStatement(
                    "SELECT copy.copy_id  FROM rental AS rental JOIN Copy AS copy ON copy.copy_id = rental.copy_id WHERE rental.member_id=? AND copy.title_id=? AND copy.status=?");
            statement.setInt(1, memberId);
            statement.setInt(2, titleId);
            statement.setString(3, VidTable.COPY_STATUS_CHECKED_OUT);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                copyId = rs.getInt(VidTable.COPY_KEY);
            }
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            System.err.printf("problem when executing query: %s\n", msg);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                System.err.printf("problem with when closing statement: %s\n",
                        msg);
            }
        }
        return copyId;
    }

    public List<Copy> getAllCheckedOutCopiesForTitle(int titleId) throws FileNotFoundException, IOException, SQLException{
        List<Copy> copies= new ArrayList<Copy>();
        DbConnection dbConnection = DbConnection.accessDbConnection();
        // create statement
        PreparedStatement statement = null;
        try {
            statement = dbConnection.getConnection().prepareStatement(
                    "SELECT *  FROM Copy WHERE title_id=? AND status=?");
            statement.setInt(1, titleId);
            statement.setString(2, VidTable.COPY_STATUS_CHECKED_OUT);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                Copy copy = new Copy();
                copy.setCopyId(rs.getInt(VidTable.COPY_KEY));
                copy.setTitleId(rs.getInt(VidTable.TITLE_KEY));
                copy.setStatus(rs.getString(VidTable.COPY_STATUS));
                copy.setValidDate(rs.getDate(VidTable.COPY_DATE));
                copies.add(copy);
            }
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            System.err.printf("problem when executing query: %s\n", msg);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                System.err.printf("problem with when closing statement: %s\n",
                        msg);
            }
        }
        return copies;
    }

    public List<Copy> getAllCheckedInCopiesForTitle(int titleId) throws FileNotFoundException, IOException, SQLException{
        List<Copy> copies= new ArrayList<Copy>();
        DbConnection dbConnection = DbConnection.accessDbConnection();
        // create statement
        PreparedStatement statement = null;
        try {
            statement = dbConnection.getConnection().prepareStatement(
                    "SELECT *  FROM Copy WHERE title_id=? AND status=?");
            statement.setInt(1, titleId);
            statement.setString(2, VidTable.COPY_STATUS_AVAILABLE);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                Copy copy = new Copy();
                copy.setCopyId(rs.getInt(VidTable.COPY_KEY));
                copy.setTitleId(rs.getInt(VidTable.TITLE_KEY));
                copy.setStatus(rs.getString(VidTable.COPY_STATUS));
                copy.setValidDate(rs.getDate(VidTable.COPY_DATE));
                copies.add(copy);
            }
        } catch (SQLException ex) {
            String msg = ex.getMessage();
            System.err.printf("problem when executing query: %s\n", msg);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                String msg = ex.getMessage();
                System.err.printf("problem with when closing statement: %s\n",
                        msg);
            }
        }
        return copies;
    }
}
